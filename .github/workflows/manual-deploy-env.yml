name: Manual deploy all in one environment

on:
  workflow_dispatch:
    # Inputs the workflow accepts.
    inputs:
      targetEnv:
        type: choice
        description: 'targetEnv'
        default: 'd1'
        required: true
        options:
          - d1
          - d2
          - t3
          - prod
      fargateSvcDesiredCount:
        description: 'fargateSvcDesiredCount'
        default: '1'
        required: true

run-name: ${{ inputs.targetEnv }} - Deploy all, svcCount=${{ inputs.fargateSvcDesiredCount }}, branch=${{ github.head_ref || github.ref_name }}

env:
  targetEnv: ${{ inputs.targetEnv }}
  fargateSvcDesiredCount: ${{ inputs.fargateSvcDesiredCount }}

jobs:
  deployAllMicroServicesWithinEnv:
    name: Manual deploy all in one environment
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - name: For prod deployment, only user 'wdaicellorg' can deploy and deployment can only from a release branch
        if: ${{ inputs.targetEnv == 'prod' && !(github.actor == 'wdaicellorg' && startsWith(github.ref_name, 'release')) }}
        run: |
          echo ${{ inputs.targetEnv }} ${{ github.actor }} ${{ contains(github.ref_name, 'release') }}
          echo Only user 'wdaicellorg' can deploy to prod, and only the release branch can be deployed to prod.
          exit 1
      - name: Configure AWS Credentials - nonprod
        if: ${{ inputs.targetEnv != 'prod' }}
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          role-to-assume: ${{ format('arn:aws:iam::{0}:role/github-cdk-deploy-role', secrets.NON_PROD_AWS_ACCOUNT) }}
          aws-region: 'us-east-1'
      - name: Configure AWS Credentials - prod
        if: ${{ inputs.targetEnv == 'prod' }}
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          role-to-assume: ${{ format('arn:aws:iam::{0}:role/github-cdk-deploy-role', secrets.PROD_AWS_ACCOUNT) }}
          aws-region: 'us-east-1'
      - uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'corretto'
          cache: maven
      - name: Build with Maven
        run: |
          cd microservices/microa
          mvn -B package --file pom.xml
          cd ../animal
          mvn -B package --file pom.xml
      - name: Setup Node.js environment
        uses: actions/setup-node@v3.4.1
        with:
          node-version: "16"
      - name: Install AWS CDK
        run: 'sudo npm install -g aws-cdk'

      - name: Deploy AWS resources of all the microservices in ${{ inputs.targetEnv }}.
        run: |
          cd cdk-infra/github-deploy-infra/micro-svc-infra
          npm install
          npm run build
                  
          echo "Deploying Api Gateway for this environment ..."
          cdk deploy labsys-env-${{ inputs.targetEnv }}-apiGateway-stack ---require-approval never
          
          echo "Deploying all microservices within the environment ..."
          cdk deploy "labsys-env-${{ inputs.targetEnv }}-*" ---require-approval never
          
          echo "Redeploying Api Gateway, so the api-microservice-integration configuration can take effect ..."
          cdk deploy labsys-env-${{ inputs.targetEnv }}-apiGateway-stack ---require-approval never



        
      
      
      
